{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","placeholder","onChange","target","onClick","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","src","alt","GifGrid","GifExpertApp","categories","element","ReactDOM","render","document","getElementById"],"mappings":"2MA4CeA,EAzCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKd,UACE,sBAAKO,UAAU,qCAAf,UACE,uBACEA,UAAU,wBACVC,KAAK,OACLC,MAAOV,EACPW,YAAa,oBACbC,SApBgB,SAACT,GACzBF,EAAcE,EAAEU,OAAOH,UAqBjB,wBAAQF,UAAU,+BAA+BC,KAAK,SAAtD,oBAGF,wBAAQD,UAAU,+BAA+BC,KAAK,QAAQK,QAAS,WAAQhB,EAAc,CAAC,MAA9F,gCAIA,2B,+BCnCFiB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAERC,EAFQ,iDAEwCC,UAAUH,GAFlD,+DAGKI,MAAMF,GAHX,cAGRG,EAHQ,gBAISA,EAAKC,OAJd,uBAINC,EAJM,EAINA,KAEFC,EACJD,EAAKE,KAAI,SAACC,GACR,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXzB,kBAcLM,GAdK,4CAAH,sDAkBET,ICOAgB,EAtBM,SAACf,GAEpB,MAA0BjB,mBAAS,CACjCwB,KAAM,GACNS,SAAQ,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAbAC,qBAAU,WACRpB,EAAQC,GACLoB,MAAK,SAAAC,GACFH,EAAS,CACPX,KAAKc,EACLL,SAAQ,SAKhB,CAAChB,IAGIiB,GCTMK,EAXK,SAAC,GAAiB,IAAhBV,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAG1B,OACE,sBAAKV,UAAU,yCAAf,UACE,qBAAKA,UAAU,GAAE+B,IAAKrB,EAAKsB,IAAKZ,IAChC,mBAAGpB,UAAU,MAAb,SAAoBoB,QCqBXa,EAxBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACjB,EAAiCe,EAAaf,GAAjCa,EAAb,EAAQN,KAAaS,EAArB,EAAqBA,QAErB,OACE,qCACE,oBAAIxB,UAAU,SACd,oBAAIA,UAAU,yDAAd,SAAwEQ,IAEvEgB,GAAW,mBAAGxB,UAAU,mCAAb,wBAGV,qBAAKA,UAAU,aAAf,SACGqB,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCKVe,EAlBM,WACnB,MAAoC3C,mBAAS,CAAC,wBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACE,mCACE,sBAAKU,UAAU,YAAf,UACA,oBAAIA,UAAU,kBAAd,oBACA,cAAC,EAAD,CAAaV,cAAeA,IAC5B,6BACG6C,EAAWlB,KAAI,SAACmB,GAAD,OACd,cAAC,EAAD,CAAuB5B,SAAU4B,GAAnBA,cCTxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7296c4ee.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"d-flex justify-content-center mt-5\">\r\n          <input\r\n            className=\"form-control w-50 p-3\"\r\n            type=\"text\"\r\n            value={inputValue}\r\n            placeholder={\"Ingrese un nombre\"}\r\n            onChange={handleInputChange}\r\n          ></input>\r\n          <button className=\"btn btn-lg btn-secondary p-3\" type=\"submit\">\r\n            Buscar\r\n        </button>\r\n        <button className=\"btn btn-lg btn-dark ms-3 p-3\" type=\"reset\" onClick={() => { setCategories([\"\"]) } }>\r\n          Borrar busqueda\r\n          </button>\r\n        </div>\r\n        <br />\r\n      </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=rbFRdyeMSGSEPCB5KlWS1oaMmjxfwK8E`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = \r\n    data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n  \r\n};\r\n\r\nexport default getGifs;\r\n","import { useEffect, useState } from \"react\";\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nconst useFetchGifs = (category) => {\r\n  \r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading:true\r\n  })\r\n  useEffect(()=> {\r\n    getGifs(category)\r\n      .then(imgs => {\r\n          setState({\r\n            data:imgs,\r\n            loading:false\r\n          })\r\n     \r\n        \r\n      })\r\n  },[category])\r\n   \r\n\r\n  return state\r\n}\r\n\r\nexport default useFetchGifs","import React from 'react'\r\n\r\nconst GifGridItem = ({title,url}) => {\r\n\r\n\r\n  return (\r\n    <div className='card animate__animated animate__zoomIn'>\r\n      <img className=\"\"src={url} alt={title} />\r\n      <p className=\"p-3\">{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem","import React from \"react\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n// import getGifs from \"../helpers/getGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <hr className=\"mt-5\"/>\r\n      <h3 className='animate__animated animate__zoomIn mt-5 text-center p-3'>{category}</h3>\r\n\r\n      {loading && <p className='animate__animated animate__flash'>loading...</p>}\r\n\r\n      {\r\n        <div className=\"card-grid \">\r\n          {images.map(img => (\r\n            <GifGridItem\r\n                key={img.id}\r\n                {...img}\r\n            />\r\n          ))}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Beavis and Butthead\"]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n      <h2 className=\"p-5 text-center\">GifApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((element) => (\r\n          <GifGrid key={element} category={element} />\r\n        ))}\r\n        </ol>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}